#!/bin/bash
set -e

LOCATION="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
JEKRYPT_FOLDER="$LOCATION/.jekrypt"

source "$LOCATION/jekrypt.cfg"

mkdir -p "$JEKRYPT_FOLDER"
mkdir -p "$EXPORT_FOLDER"


if [[ ! -f "$MASTERPASSWORD_LOCATION" ]]; then
  pwgen -s 64 1 > "$MASTERPASSWORD_LOCATION"
fi


if [[ -f "$MASTERPASSWORD_LOCATION" ]]; then
  MASTERPASSWORD="$(cat "$MASTERPASSWORD_LOCATION")"
else
  echo "Missing file or rights at $MASTERPASSWORD_LOCATION"
  echo "Stopping."
  return 1
fi

mkdir -p "$toencrypt"
mkdir -p "$encrypted"

declare -A kv

loadKVStore(){
    touch "$KVSTORE_FILE"
    while IFS=' ' read -r key value
    do
        kv[$key]="$value"
    done < "$KVSTORE_FILE"
}

get(){
    loadKVStore
    echo "${kv[$1]}"
}

put(){
    loadKVStore
    kv["$1"]="$2"
    rm "$KVSTORE_FILE"
    for i in "${!kv[@]}"
    do
        echo "$i ${kv[$i]}" >> "$KVSTORE_FILE"
    done
}

exportAsYML(){
    loadKVStore
    [[ -f "$EXPORT" ]] && rm "$EXPORT"
    for i in "${!kv[@]}"
    do
        echo "- link: $i" >> "$EXPORT"
        echo "  password: ${kv[$i]}" >> "$EXPORT"
    done
}

# $1 file to encrypt
# $2 destination
# $3 password
encryptFile(){
    TEXT=$(cat "$1")
    DEST="$2"/"$(hashFilename "$1")".md
    FRONTMATTER=$(frontMatter "$TEXT")
    ENCRYPTED=$(partToEncrypt "$TEXT" | kramdown | gpg --quiet --passphrase="$3" --batch --armor -c - | base64 | tr -d '\n')
    ORIGINAL_ENCRYPTED=$(echo "$TEXT" | gpg --quiet --passphrase="$3" --batch --armor -c - | base64 | tr -d '\n')
    FILE="$(basename "$1")"
    FILENAME="$(echo "$FILE" | gpg --quiet --passphrase="$3" --batch --armor -c - | base64 | tr -d '\n')"
    FILE_NO_EXTENSION="${FILE%.*}"
    TITLE="$(title "$TEXT" "${FILE_NO_EXTENSION:11}" "$1")"
    ENCRYPTED_TITLE="$(echo "$TITLE" | gpg --quiet --passphrase="$3" --batch --armor -c - | base64 | tr -d '\n')"
    EXCERPT="$(excerpt "$1")"
    ENCRYPTED_EXCERPT="$(echo "$EXCERPT" | gpg --quiet --passphrase="$3" --batch --armor -c - | base64 | tr -d '\n')"
    {
        echo "---";
        echo "$FRONTMATTER";
        echo "original_content: $ORIGINAL_ENCRYPTED";
        echo "filename: $FILENAME"
        echo "title: $ENCRYPTED_TITLE"
        echo "excerpt: $ENCRYPTED_EXCERPT"
        echo "---";
        echo "";
        echo "$ENCRYPTED";
    } > "$DEST"
}

# $1 file to decrypt
# $2 destination
# $3 password
decryptFile(){
    TEXT=$(grep -v "private: true" < "$1")
    DEST="$2/$(retrieveEncryptedFilename "$1" "$3")"
    ENCRYPTED=$(originalContent "$TEXT" | base64 -d | gpg --quiet --batch --passphrase="$3" -d -)
    echo "$ENCRYPTED" > "$DEST"
}

frontMatterEnd(){
    echo "$1" | grep -n "\-\-\-" | head -n 2 | tail -n 1 | sed -E 's/(.*):.*/\1/g'
}

frontMatter(){
    END=$(frontMatterEnd "$1")
    echo "$1" | head -n "$END" | grep -v "original_content: *"  | grep -v "filename: *" | grep -v "title: *" | grep -v "excerpt: *" | grep -v "\-\-\-"
}

partToEncrypt(){
    echo "$1" | tr '\n' '~' | sed -E 's/\-\-\-.*\-\-\-~+(.*)/\1/g' | tr '~' '\n'
}

originalContent(){
    echo "$1" | grep "original_content:" | sed -E 's/original_content: (.*)/\1/g'
}

# $1 is the text
# $2 is the filename part for generation
# $3 is the path
title(){
  if  grep -qEi "title:" < "$3"; then
    echo "$1" | grep "title:" | sed -E 's/title: (.*)/\1/g'
  else
    echo "$2" | tr '-' ' ' |  sed -e 's/^./\U&/g; s/ ./\U&/g'
  fi
}

excerpt(){
   if  grep -qEi "excerpt:" < "$1"; then
    grep "excerpt:" < "$1" | sed -E 's/excerpt: (.*)/\1/g'
   else
    echo ""
   fi
}

getPassword(){
    VALUE=$(get "$1")
    if [[ -z "$VALUE" ]]; then
        VALUE=$(pwgen -s 64 1)
        ENCRYPTEDPASS=$(echo "$VALUE" | gpg --quiet --passphrase="$MASTERPASSWORD" --batch --armor -c -  | base64 | tr -d '\n')
        put "$1" "$ENCRYPTEDPASS"
        echo "$VALUE"
    else
        DECRYPTED="$(echo "$VALUE" | base64 -d  | gpg --quiet --batch --passphrase="$MASTERPASSWORD" -d -)"
        echo "$DECRYPTED"
    fi


}

hashFilename(){
  b="$(basename "$1")"
  datePart="${b:0:10}"
  textPart="${b:11}"
  shaText="$(echo "$textPart" | sha256sum | tr -d ' -')"
  echo "$datePart-${shaText:0:10}"
}

retrieveEncryptedFilename(){
  filename=$(grep filename < "$1" | sed -E 's/.*: (.*)/\1/g')
  b="$(basename "$1")"
  datePart="${b:0:10}"
  DECRYPTED="$(echo "$filename" | base64 -d  | gpg --quiet --batch --passphrase="$2" -d -)"
  echo "$DECRYPTED"
}

encryptAll(){
    if [[ -n "$(ls -A "$1")" ]]; then
        for f in "$1"/*; do
            echo "$f"
            KEY="$(hashFilename "$f")"
            PASS="$(getPassword "$KEY")"
            echo "LINK: $KEY $f $PASS"
            encryptFile "$f" "$2" "$PASS"
        done
        exportAsYML
    fi
}

decryptAll(){
  if [[ -n "$(ls -A "$1")" ]]; then
      for f in "$1"/*; do
          EXISTS=$(get "$(basename "$f" .md)")
          if [[ -n "$EXISTS" ]]; then
              echo "Decrypting $f"
              VALUE=$(getPassword "$(basename "$f" .md)")
              decryptFile "$f" "$2" "$VALUE"
              echo "Decrypted $f"
          fi

      done
      exportAsYML
  fi
}

if [[ ! $# -eq 0 ]] ; then
    case "$1" in
        "--encrypt-all") encryptAll "$toencrypt" "$encrypted" ;;
        "--decrypt-all") decryptAll "$encrypted" "$toencrypt" ;;
    esac
fi
